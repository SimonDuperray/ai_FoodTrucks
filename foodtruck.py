# -*- coding: utf-8 -*-
"""FoodTruck.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W0Xg2kNwYxqj4r9704MjUM8GqPr3FNVZ

<h1>Problem:</h1>

Suppose you are the CEO of a Food Trucks franchise. You are considering different cities to open a new point of sale. The chain already has trucks in different cities and you have data for the city's profits and populations.
You want to use this data to help you choose the city to open a new point of sale.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

dataset = pd.read_csv('univariate_linear_regression_dataset.csv')
X = dataset.iloc[:, 0].values
y = dataset.iloc[:, -1].values

dataset

axes = plt.axes()
axes.grid()
plt.title("Representation")
plt.scatter(X, y)
plt.xlabel("Population (10k)")
plt.ylabel("Profit (10k)")
plt.show()

"""# Linear Regression Model

<h2>Scipy Regression</h2>
"""

from scipy import stats
slope, intercept, r_value, p_value, std_err = stats.linregress(X, y)

def predict(X):
  return slope * X + intercept

axes = plt.axes()
axes.grid()
plt.title(" Scipy Predictions")
plt.plot(X, predict(X), c='r')
plt.scatter(X, y, c='b')
plt.xlabel('Population (10k)')
plt.ylabel('Profit (10k)')
plt.xlim((4.5, 22.5))
plt.ylim((-5, 25))
plt.show()

"""<h2>Scikit Learn - Regression</h2>"""

from sklearn.model_selection import train_test_split
X = X.reshape(X.shape[0], 1)
y = y.reshape(y.shape[0], 1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

axes = plt.axes()
axes.grid()
plt.scatter(X_train, y_train, color='blue')
plt.plot(X_train, regressor.predict(X_train), color='red')
plt.title("SKL Regression - Train set")
plt.xlabel("Population (10k)")
plt.ylabel('Profit (10k)')
plt.show()

axes = plt.axes()
axes.grid()
plt.scatter(X_test, y_test, color='blue')
plt.plot(X_test, y_pred, color='red')
plt.title("SKL Regression - Test set")
plt.xlabel("Population (10k)")
plt.ylabel('Profit (10k)')
plt.show()

"""<h2>Compare Scipy and SKLearn</h2>

<h3>Plots</h3>
"""

axes = plt.axes()
axes.grid()
plt.title('Scipy vs Sklearn results')
plt.plot(X_test, y_pred, c='b', label="sklearn")
plt.plot(X_test, predict(X_test), c='r', label="scipy")
plt.xlabel("Population (10k)")
plt.ylabel('Profit (10k)')
plt.legend(loc="lower right")
plt.show()

"""<h3>R2 Scores</h3>"""

from sklearn.metrics import r2_score
print("Scipy: "+str(r_value))
print("SKLearn: "+str(r2_score(y_train, regressor.predict(X_train))))

"""<h3>Random Predictions</h3>"""

angers = np.array([15])
angers = angers.reshape(angers.shape[0], 1)
print("150K (Angers)")
print("Scipy: ["+str(predict(15))+"]")
print("SkLearn: "+str(regressor.predict(angers).reshape(1,)))
print("Delta = "+str(np.abs(predict(15)-regressor.predict(angers).reshape(1,))))

rennes = np.array([21])
rennes = rennes.reshape(rennes.shape[0], 1)
print("215K (Rennes)")
print("Scipy: ["+str(predict(21))+"]")
print("SkLearn: "+str(regressor.predict(rennes).reshape(1,)))
print("Delta = "+str(np.abs(predict(21)-regressor.predict(rennes).reshape(1,))))

"""# Support Vector Machine Model"""

from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
sc_y = StandardScaler()
X = sc_X.fit_transform(X)
y = sc_y.fit_transform(y)

from sklearn.svm import SVR
regressor = SVR(kernel="rbf")
regressor.fit(X, y)

"""<h2>Observations</h2>"""

X_grid = np.arange(min(sc_X.inverse_transform(X)), max(sc_X.inverse_transform(X)), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(sc_X.inverse_transform(X), sc_y.inverse_transform(y), color = 'red')
plt.plot(X_grid, sc_y.inverse_transform(regressor.predict(sc_X.transform(X_grid))), color = 'blue')
plt.title('SVM Model')
plt.xlabel('Population (10k)')
plt.ylabel('Profit (10k)')
plt.show()

"""<h2>Random Predictions</h2>"""

print('150K (Angers)')
print("Predict: "+str(sc_y.inverse_transform(regressor.predict(sc_X.transform([[15]])))))

print('215K (Rennes)')
print("Predict: "+str(sc_y.inverse_transform(regressor.predict(sc_X.transform([[21]])))))